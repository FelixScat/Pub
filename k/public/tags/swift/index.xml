<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on Cb7d</title>
    <link>http://example.org/tags/swift/</link>
    <description>Recent content in Swift on Cb7d</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2020</copyright>
    <lastBuildDate>Tue, 11 Jun 2019 10:46:42 +0800</lastBuildDate>
    
	<atom:link href="http://example.org/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Runloop 运行循环</title>
      <link>http://example.org/posts/runloop/</link>
      <pubDate>Tue, 11 Jun 2019 10:46:42 +0800</pubDate>
      
      <guid>http://example.org/posts/runloop/</guid>
      <description>RunLoop 什么是RunLoop？
 A RunLoop object processes input for sources such as mouse and keyboard events from the window system, Port objects, and NSConnection objects. A RunLoop object also processes Timer events. Your application neither creates or explicitly manages RunLoop objects. Each Thread object—including the application’s main thread—has an RunLoop object automatically created for it as needed. If you need to access the current thread’s run loop, you do so with the class method current.</description>
    </item>
    
    <item>
      <title>GCD (Swift)</title>
      <link>http://example.org/posts/gcd_swift/</link>
      <pubDate>Mon, 25 Mar 2019 10:46:42 +0800</pubDate>
      
      <guid>http://example.org/posts/gcd_swift/</guid>
      <description>Grand Central Dispatch 这篇文主要想总结下 GCD 在swift中的使用，文中示例代码
ObjC版本
基本概念 进程 进程指在系统中能独立运行并作为资源分配的基本单位，它是由一组机器指令、数据和堆栈等组成的，是一个能独立运行的活动实体
线程 线程是进程的基本执行单元，一个进程（程序）的所有任务都在线程中执行。
队列 队列，又称为伫列（queue），是先进先出（FIFO, First-In-First-Out）的线性表。在具体应用中通常用链表或者数组来实现。队列只允许在后端（称为rear）进行插入操作，在前端（称为front）进行删除操作。队列的操作方式和堆栈类似，唯一的区别在于队列只允许新数据在后端进行添加。
同步/异步 可以这么理解：
假如你要做两件事 ， 烧水 、 刷牙
 同步 ：你烧水 ， 等水烧开了你再去刷牙 异步 ：你烧水 ，不等水烧开就去刷牙了 ， 水烧开了会发出声音告诉你（callback） ， 然后你再处理水烧开之后的事情  只要你是个正常人 ， 都会选择第二种 ，当然也有特殊情况 ，你喜欢用热水刷牙
并发 指两个或多个事件在同一时间间隔内发生。可以在某条线程和其他线程之间反复多次进行上下文切换，看上去就好像一个CPU能够并且执行多个线程一样。其实是伪异步。
线程队列中并行/串行 串行队列：串行队列的特点是队列内的线程是一个一个执行，直到结束。并行队列：并行队列的特点是队列中所有线程的执行结束时必须是一块的，队列中其他线程执行完毕后，会阻塞当前线程等待队列中其他线程执行，然后一块执行完毕。
 开始 下面我们就用刷牙与烧水来举例，首先clone工程，本文工程Demo
git clone https://github.com/FelixScat/demo_GCD.git cd swiftGCD swift package generate-xcodeproj xed ./ 打开main.swift先声明两个事件
/// 烧水 let boiledWater = { print(&amp;#34;开始烧水: \(Thread.current)&amp;#34;) sleep(3) print(&amp;#34;水烧好啦&amp;#34;) } /// 刷牙 let brushTeeth = { print(&amp;#34;开始刷牙:\(Thread.</description>
    </item>
    
    <item>
      <title>cocoapods</title>
      <link>http://example.org/posts/cocoapods/</link>
      <pubDate>Sat, 16 Jun 2018 10:46:42 +0800</pubDate>
      
      <guid>http://example.org/posts/cocoapods/</guid>
      <description>CocoaPods CocoaPods是OS X和iOS下的一个第三类库管理工具，通过CocoaPods工具我们可以为项目添加被称为“Pods”的依赖库（这些类库必须是CocoaPods本身所支持的），并且可以轻松管理其版本。
使用CocoaPods有以下几点好处：
 在引入第三方库时它可以自动为我们完成各种各样的配置，包括配置编译阶段、连接器选项、甚至是ARC环境下的一些配置等。 使用CocoaPods可以很方便地管理的第三方SDK，大部分稳定好用的SDK都支持cocoapods导入。 在项目模块化的过程中方便我们模块间解耦。  安装 sudo gem install cocoapods 查看版本 pod --version 在开发中安装使用cocoapods要注意版本,因为一般开发过程中要大家一起使用同一个工程,一般为了指定版本我们会在工程下创建Gemfile来指定使用cocoapods的版本。
指定使用Cocoapods的版本 除了指定Gemfile以外 ， 我们还可以安装指定版本的pods
sudo gem install cocoapods -v 1.3.1 再查看一下pod版本我们就会发现已经安装了1.3.1
卸载掉不需要的版本 当我们本地同时存在多个版本的pod的时候可以把多余的卸载掉
sudo gem uninstall cocoapods 会提示我们选择卸载的版本
Select gem to uninstall: 1. cocoapods-1.2.1 2. cocoapods-1.3.1 3. All versions &amp;gt; 我们选择想要卸载的版本的序号就好了 。
使用rvm管理ruby环境 有时我们需要不同的ruby环境，而且不想更改系统自带的时候可以考虑使用rvm管理本地的ruby版本
\curl -sSL https://get.rvm.io | bash -s stable 查看可用的ruby版本
rvm list known 使用某个制定版本作为默认的ruby版本
rvm use 2.6.3 --default 安装和使用bundle gem install bundler 然后在工程目录下创建Gemfile</description>
    </item>
    
    <item>
      <title>用Swift写个简单的区块链系统</title>
      <link>http://example.org/posts/blockchain/</link>
      <pubDate>Mon, 14 May 2018 10:46:42 +0800</pubDate>
      
      <guid>http://example.org/posts/blockchain/</guid>
      <description>BlockChainServer 源码地址
最近身边的许多人都开始玩比特币，虽然本人不炒但是想稍微了解一下其中的原理，所以就练手写了一个简易版的区块链系统。
So 、 What is the BlockChain (区块链) ? 这里引用一下Google的结果
 所谓区块链技术 ， 简称BT（Blockchain technology），也被称之为分布式账本技术，是一种互联网数据库技术，其特点是去中心化、公开透明，让每个人均可参与数据库记录。
 Base (基础概念)  交易（Transaction）：一次操作，导致账本状态的一次改变，如添加一条记录； 区块（Block）：记录一段时间内发生的交易和状态结果，是对当前账本状态的一次共识； 链（Chain）：由一个个区块按照发生顺序串联而成，是整个状态变化的日志记录。   如果把区块链作为一个状态机，则每次交易就是试图改变一次状态，而每次共识生成的区块，就是参与者对于区块中所有交易内容导致状态改变的结果进行确认。
 简单理解就是:
 如果我们把数据库假设成一本账本，读写数据库就可以看做一种记账的行为，区块链技术的原理就是在一段时间内找出记账最快最好的人，由这个人来记账，然后将账本的这一页信息发给整个系统里的其他所有人。这也就相当于改变数据库所有的记录，发给全网的其他每个节点，所以区块链技术也称为分布式账本（distributed ledger）。
 Vapor (用来开发服务端的Swift框架) 既然要用swift实现 ， 我在这里就选择vapor作为服务端框架来使用 ， vapor里面有意思的东西很多 ， 这里只介绍基本的操作而不深究其原理 。
Install 前置条件 ， 这里我们使用macOS进行开发部署 ， 以下是需要软件和版本。
 Install Xcode 9.3 or greater from the Mac App Store. Vapor requires Swift 4.1 or greater. Vapor Toolbox: 3.1.7 Vapor Framework: 3.</description>
    </item>
    
  </channel>
</rss>