<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clang on Cb7d</title>
    <link>http://example.org/tags/clang/</link>
    <description>Recent content in Clang on Cb7d</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2020</copyright>
    <lastBuildDate>Wed, 19 Feb 2020 10:46:42 +0800</lastBuildDate>
    
	<atom:link href="http://example.org/tags/clang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Clang简单上手</title>
      <link>http://example.org/posts/clang/</link>
      <pubDate>Wed, 19 Feb 2020 10:46:42 +0800</pubDate>
      
      <guid>http://example.org/posts/clang/</guid>
      <description>Clang 作为一个iOS工程师，每次看到Xcode在进行漫长的编译的时候总是忍不住想深究一下自己手写的BUG是如何被生成的，所以下定决定研究一下我们的编译器
要探究首先要知道我们使用的是LLVM编译器
LLVM（Low Level Virtual Machine）  LLVM是一个自由软件项目，它是一种编译器基础设施，以C++写成，包含一系列模块化的编译器组件和工具链，用来开发编译器前端和后端。它是为了任意一种编程语言而写成的程序，利用虚拟技术创造出编译时期、链接时期、运行时期以及“闲置时期”的最优化。它最早以C/C++为实现对象，而当前它已支持包括ActionScript、Ada、D语言、Fortran、GLSL、Haskell、Java字节码、Objective-C、Swift、Python、Ruby、Rust、Scala以及C#等语言。
 以上摘自维基百科
几种编译器简介 目前市面上常见的编译器有以下两种
 GCC（GNU Compiler Collection） LLVM  LLVM 我们上面已经稍微介绍过了，下面引用维基百科对GCC的定义
 GNU编译器套装（英语：GNU Compiler Collection，缩写为GCC），指一套编程语言编译器，以GPL及LGPL许可证所发行的自由软件，也是GNU项目的关键部分，也是GNU工具链的主要组成部分之一。GCC（特别是其中的C语言编译器）也常被认为是跨平台编译器的事实标准。1985年由理查德·马修·斯托曼开始发展，现在由自由软件基金会负责维护工作。 原名为GNU C语言编译器（GNU C Compiler），因为它原本只能处理C语言。GCC在发布后很快地得到扩展，变得可处理C++。之后也变得可处理Fortran、Pascal、Objective-C、Java、Ada，Go与其他语言。 许多操作系统，包括许多类Unix系统，如Linux及BSD家族都采用GCC作为标准编译器。
 LLVM与GCC 我们现在所使用的Xcode采用的是LLVM，以前曾经使用过GCC，见下表
   Xcode 版本 应用编译器     &amp;lt; Xcode3 GCC   Xcode3 GCC + LLVM   Xcode4.2 默认LLVM-Clang   &amp;gt; Xcode5 废弃GCC    那么，同样是编译器，为何Xcode最终选择LLVM而舍弃Clang呢
 Apple对Objective-C新增的特性，GCC并未配合给予实现 GCC编译器前后端代码耦合度过高 license GCC限制了LLVM-GCC的开发  LLVM 设计思想 以下是传统的三相设计思想</description>
    </item>
    
  </channel>
</rss>